<?php
namespace Swurl;

class Host extends \ArrayObject
{
    public function __construct($hostname = null)
    {
        $hostnameParts = explode('.', $hostname);
        parent::__construct($hostnameParts);
    }

    public function getTld()
    {
        return $this[count($this) - 1];
    }

    public function offsetSet($index, $newval)
    {
        if (count($this) == 127) {
            throw new \RuntimeException("domain names may have at a maximum 127 components");
        }
        if (strlen($this->__toString()) . ".$newval" > 253) {
            throw new \RuntimeException("max length of domain names is 253 characters");
        }
        parent::offsetSet($index, $newval); // TODO: Change the autogenerated stub
    }

    public function __toString()
    {
        return implode(".", $this->getArrayCopy());
    }

    public function addSubdomain($domain)
    {
        $parts = $this->getArrayCopy();
        array_unshift($parts, $domain);
        $this->exchangeArray($parts);
    }

    public function removeSubdomain($domain)
    {
        $parts = $this->getArrayCopy();
        $subdomainIndex = array_search($domain, $parts);
        if ($subdomainIndex !== false) {
            unset($parts[$subdomainIndex]);
        }
        $parts = array_values($parts);
        $this->exchangeArray($parts);
    }

    public function hasSubdomain($domain)
    {
        return array_search($domain, $this->getArrayCopy()) !== false;
    }
}